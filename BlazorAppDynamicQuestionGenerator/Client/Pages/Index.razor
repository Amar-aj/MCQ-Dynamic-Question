@page "/"
@using BlazorAppDynamicQuestionGenerator.Client.Common;
@using BlazorAppDynamicQuestionGenerator.Client.Pages.AnswerOptions
@using BlazorAppDynamicQuestionGenerator.Shared.Models;

<PageTitle>Index</PageTitle>
<button class="btn btn-primary" @onclick="IsShowQuestion">@(isView ? "Hide" : "Show")</button>

@if (isView)
{
    <p> Qusetion</p>
    <p> @question.Name</p>
    @if (!string.IsNullOrWhiteSpace(question.ImagePath))
    {
        <RadzenImage Path="@question.ImagePath" Style="width: 100%; height:100px" />
    }
    <p> Options</p>
    @foreach (var item in multipuleChoiceOptionsList)
    {
        <p> @item.Name</p>
        @if (!string.IsNullOrWhiteSpace(item.ImagePath))
        {
            <RadzenImage Path="@item.ImagePath" Style="width: 100%; height:100px" />
        }
    }
    <p> Answer</p>
    <p> @question.CorrectAnswer</p>
    
}
else
{
    <RadzenPanel>

        <div class="container-fluid">
            <div class="row px-3">
                <div class="col-8">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Question</RadzenText>
                    <RadzenTextArea Placeholder="Enter here..." @bind-Value=@question.Name class="w-100" />
                </div>
                <div class="col-4">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Image</RadzenText>
                    <RadzenFileInput @bind-Value=@question.ImagePath TValue="string" class="w-100" />
                </div>
            </div>

            <div class="row px-3">
                <div class="col-8">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Answer Type</RadzenText>
                    <RadzenDropDown AllowClear="true" AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data=@answerType @bind-Value=@question.AnswerTypeId
                                TextProperty="Name" ValueProperty="Id" Change=@(args => OnChangeAnswerType(args, "DropDown with bound Value")) class="w-100" />
                </div>
                <div class="col-4">
                </div>
            </div>
            <p>Options</p>
            <div class="row px-3">


                @if (multipuleChoiceOptionsList.Any())
                {
                    @for (int i = 0; i < answerMultipuleChoiceOptionsLength; i++)
                    {
                        <MultipuleChoiceTextBox OptionId="@answerMultipuleChoiceOptionsLength"
                                    MultipuleChoiceOptionsChanged="ReturnMultipuleChoiceOptions" />

                    }
                }

                @if (multipuleChoiceOptionsList.Any())
                {
                    <MultipuleChoiceRadioButton RdoLength="answerMultipuleChoiceOptionsLength"
                                        MultipuleChoiceOptionsSelectAnswer="ReturnMultipuleChoiceOptionsCurrectAnswer"></MultipuleChoiceRadioButton>
                }
            </div>
            <div class="row px-3 float-end">
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="AddMultipuleChoiceOptions">Add</button>

                </div>
            </div>
        </div>

    </RadzenPanel>

}


@code {
    Question question = new Question();
    List<AnswerType> answerType = new List<AnswerType>();
    int answerMultipuleChoiceOptionsLength = 0;
    List<MultipuleChoiceOptions> multipuleChoiceOptionsList = new List<MultipuleChoiceOptions>();
    bool isView = false;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddMultipuleChoiceOptions();
        answerType = StaticData.multipuleChoiceOptionsList();
        question.AnswerTypeId = 1;
    }
    void OnChangeAnswerType(object value, string name)
    {

    }
    void AddMultipuleChoiceOptions()
    {
        answerMultipuleChoiceOptionsLength++;
        multipuleChoiceOptionsList.Add(new MultipuleChoiceOptions
            {
                Id = answerMultipuleChoiceOptionsLength,
                Name = "",
                ImagePath = ""
            });
    }
    void ReturnMultipuleChoiceOptions(MultipuleChoiceOptions multipuleChoiceOptions)
    {
        multipuleChoiceOptionsList.Where(x => x.Id == multipuleChoiceOptions.Id).FirstOrDefault().Name = multipuleChoiceOptions.Name;
        multipuleChoiceOptionsList.Where(x => x.Id == multipuleChoiceOptions.Id).FirstOrDefault().ImagePath = multipuleChoiceOptions.ImagePath;
    }
    void ReturnMultipuleChoiceOptionsCurrectAnswer(int vale)
    {
        question.CorrectAnswer = vale;
    }
    void IsShowQuestion()
    {
        isView = !isView;
    }

}
